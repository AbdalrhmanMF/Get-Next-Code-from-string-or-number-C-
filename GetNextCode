using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GetNextCode_Abdalrhman
{
    class Program
    {
        static void Main(string[] args)
        {

            //List<string> strings = new List<string>();
            //strings.Add("19");
            //strings.Add("1");
            //strings.Add("7");
            ////strings.Add("0y0144");
            ////strings.Add("0-0670");
            ////strings.Add("00121");
            ////strings.Add("0z0152");
            ////strings.Add("0y0144");

            //List<string> _strCode = strings.OrderBy(x => x, new SemiNumericComparer()).ToList();



            //string CurrentCode = _strCode.LastOrDefault() ?? "0";
            ////CurrentCode = CurrentCode == "" ? "0" : CurrentCode;

            //char lastCharacter = CurrentCode[CurrentCode.Length - 1];

            //Console.WriteLine("Current string Is: " + CurrentCode);
            //Console.WriteLine(Environment.NewLine + "last Character Is: " + lastCharacter);

            //string MinusLastChar = CurrentCode.Remove(CurrentCode.Length - 1, 1);

            //int numericValue;
            //if (Int32.TryParse(CurrentCode.Substring(CurrentCode.Length - 1), out numericValue))
            //{
            //    Console.WriteLine(Environment.NewLine + " =================> New String Is: " + MinusLastChar + Getnextint(numericValue));
            //}
            //else
            //{
            //    char nextChar;
            //    char letter = lastCharacter;

            //    if (letter == 'z' || letter == 'Z' || letter == '-')
            //    {
            //        nextChar = '1';
            //        Console.WriteLine(Environment.NewLine + " =================> New String Is: " + CurrentCode + nextChar);
            //    }
            //    else
            //    {
            //        nextChar = (char)((int)(lastCharacter) + 1);
            //        Console.WriteLine(Environment.NewLine + " =================> New String Is: " + MinusLastChar + nextChar);
            //    }
            //}


            var stringNumber = "123P";
            int numericValue;
            bool isNumber = int.TryParse(stringNumber, out numericValue);

            Console.WriteLine(Environment.NewLine + " =================>  Is Number : " + isNumber);
            //isNumber is true and numericValue=123

            //var stringNumber = "123P";
            //int numericValue;
            //bool isNumber = int.TryParse(stringNumber, out numericValue);


            //string x = "1,2,3,55-6";
            //var array = x.Split(',','-');
            //Console.WriteLine("highest is: " + array.Max(c => int.Parse(c)));


            //List<string> strings = new List<string>();
            //strings.Add("fdsg");
            //strings.Add("00121");
            //strings.Add("00152");
            //strings.Add("00144");

            //IEnumerable<string> longestStrings = strings
            //    .GroupBy(str => str == null ? 0 : str.Length)
            //    .OrderByDescending(g => g.Key) // order by length
            //    .First();

            //int maxLength = strings.Max(str => str == null ? 0 : str.Length);

            //longestStrings = strings.Where(str => (str == null ? 0 : str.Length) == maxLength);

            //foreach (var item in strings)
            //{
            //    if (item.All(char.IsDigit))
            //    {
            //        Console.WriteLine(Environment.NewLine + "Result : ---> " + item);
            //    }
            //    else
            //    {

            //        Console.WriteLine(Environment.NewLine + "item Result : ---> " + item);
            //    }
            //}
            //Console.WriteLine(Environment.NewLine + "item maxLength : ---> " + maxLength);



            //var g = data.GroupBy(i => i);
            //foreach (var grp in g)
            //{
            //    Console.WriteLine("{0} {1}", grp.Key, grp.Count());
            //}


            //foreach (var item in data)
            //{
            //Console.WriteLine(Environment.NewLine + item);

            //}
            //Console.WriteLine(Environment.NewLine + "==================== "+ Environment.NewLine);
            //Console.WriteLine(data.Max());

            Console.WriteLine(Environment.NewLine + "==================== " + Environment.NewLine);
            //var result = (data.GroupBy(item => item)
            //    .Select(itemGroup => new { Item = itemGroup.Key, Count = itemGroup.Count() })
            //    .OrderBy(Item => Item.Count).ThenBy(Item => Item.Item) ).ToList();



            //Console.WriteLine("{0} {1}\r\n{2} {3}", result.First().Item, result.First().Count, result.Last().Item, result.Last().Count);

            //var max = strings.OrderByDescending(v => int.Parse(v.Substring(1))).First();

            //Console.WriteLine(Environment.NewLine + "Result : ---> "+ max);

            //Console.WriteLine(Environment.NewLine + " =================> Check Is Has Symbol: " + HasSpecialChars(CurrentCode));

            Console.WriteLine(Environment.NewLine + "Press any key to exit");
            Console.ReadKey();


        }

        public static bool HasSpecialChars(string yourString)
        {
            return yourString.Any(ch => !Char.IsLetterOrDigit(ch));
        }


        public static int Getnextint(int CurrVal)
        {
            return (CurrVal + 1);
        }



        public class SemiNumericComparer : IComparer<string>
        {
            /// <summary>
            /// Method to determine if a string is a number
            /// </summary>
            /// <param name="value">String to test</param>
            /// <returns>True if numeric</returns>
            public static bool IsNumeric(string value)
            {
                return int.TryParse(value, out _);
            }

            /// <inheritdoc />
            public int Compare(string s1, string s2)
            {
                const int S1GreaterThanS2 = 1;
                const int S2GreaterThanS1 = -1;

                var IsNumeric1 = IsNumeric(s1);
                var IsNumeric2 = IsNumeric(s2);

                if (IsNumeric1 && IsNumeric2)
                {
                    var i1 = Convert.ToInt32(s1);
                    var i2 = Convert.ToInt32(s2);

                    if (i1 > i2)
                    {
                        return S1GreaterThanS2;
                    }

                    if (i1 < i2)
                    {
                        return S2GreaterThanS1;
                    }

                    return 0;
                }

                if (IsNumeric1)
                {
                    return S2GreaterThanS1;
                }

                if (IsNumeric2)
                {
                    return S1GreaterThanS2;
                }

                return string.Compare(s1, s2, true, CultureInfo.InvariantCulture);
            }
        }
    }
}
